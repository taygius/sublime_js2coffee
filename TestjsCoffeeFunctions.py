import unittest, jsCoffeeFunctions

########################################################################
class TestjsCoffeeFunctions(unittest.TestCase):
    """"""

    # #----------------------------------------------------------------------
    def test_coffe2js(self):
        """ ()-> """
        stdout, stderr = jsCoffeeFunctions.coffee2js('()->')
        stdout = jsCoffeeFunctions.prepareJs(stdout)
        self.assertEqual(stdout, '(function() {});')

    def test_coffe2js_2(self):
        """ a=->1 """
        stdout, stderr = jsCoffeeFunctions.coffee2js('a=->1')
        stdout = jsCoffeeFunctions.prepareJs(stdout)
        self.assertEqual(stdout, "var a;\n\na = function() {\n  return 1;\n};")

    #----------------------------------------------------------------------
    def test_prepareCoffee(self):
        """ prepareCoffee """
        test1 = jsCoffeeFunctions.prepareCoffee('// ololo \n ()->').strip(" \t\n\r")
        self.assertEqual(test1, '()->')

    #----------------------------------------------------------------------
    def test_prepareJs_comments(self):
        """ prepareJs - remove default comments """
        test1 = jsCoffeeFunctions.prepareJs('// Generated by CoffeeScript 1.4.0\n\n(function() {});')
        self.assertEqual(test1, '(function() {});')

    def test_prepareJsBefore_1(self):
        """ prepareJs - remove many vars from converting """
        test1 = jsCoffeeFunctions.prepareJsBefore('var i, _i;')
        self.assertEqual(test1.strip(" \t\n\r"), '')

    def test_prepareJsBefore_2(self):
        """ prepareJs - remove one var from converting """
        test1 = jsCoffeeFunctions.prepareJsBefore('var i;')
        self.assertEqual(test1.strip(" \t\n\r"), '')

    def test_prepareJsBefore_setted(self):
        """ prepareJs - remove one var from converting """
        test1 = jsCoffeeFunctions.prepareJsBefore('var i = 1;')
        self.assertEqual(test1.strip(" \t\n\r"), 'var i = 1;')

    #----------------------------------------------------------------------
    def test_js2coffee(self):
        """ js2coffee """
        stdout, stderr = jsCoffeeFunctions.js2coffee('(function() {});')
        self.assertEqual(jsCoffeeFunctions.prepareCoffee(stdout), '->')
